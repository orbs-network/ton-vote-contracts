
;; ops
const OP::INIT = 0x1;
const OP::NEW_CHILD = 0x2;
const OP::CHANGE_OWNER = 0x3;

const ERROR::UNAUTHORIZED_SENDER = 0x2000;
const ERROR::UNINITIALIZED = 0x2000;

;; modes
const MODE::SEND_MODE_REMAINING_AMOUNT = 64;


(int, slice, int, int, cell, slice, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(1),    ;; init
    ds~load_msg_addr(), ;; owner
    ds~load_uint(64),   ;; proxy_id
    ds~load_uint(64),   ;; next_child_id
    ds~load_ref(),      ;; child_code
    ds~load_msg_addr(), ;; parent_addr
    ds~load_ref()       ;; content
  );
}

() save_data(int init, slice owner, int proxy_id, int next_child_id, cell child_code, slice parent_addr, cell content) impure inline {
  set_data(begin_cell()
    .store_uint(init)
    .store_slice(owner)
    .store_uint(proxy_id, 64)
    .store_uint(next_child_id, 64)
    .store_ref(child_code)
    .store_slice(parent_addr)
    .store_ref(content)
    .end_cell());
}

cell calculate_child_state_init(slice owner, int next_child_id, cell child_code) {
  var next_proposal_index = 0;
  cell data = begin_cell().store_slice(owner).store_uint(next_child_id, 64).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(child_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_child_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_child(slice owner, int next_child_id, cell child_code) impure {
  cell state_init = calculate_child_state_init(owner, next_child_id, child_code);
  slice child_address =  calculate_child_address(0, state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(child_address)
            .store_coins(0)
            .store_uint(4 + 2 + 0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
  send_raw_message(msg.end_cell(), MODE::SEND_MODE_REMAINING_AMOUNT); ;; sender pays gas fees
}


() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    
    var (init, owner, proxy_id, next_child_id, child_code, parent_addr, content) = load_data();

    slice sender = cs~load_msg_addr();
    throw_unless(ERROR::UNAUTHORIZED_SENDER, equal_slice_bits(sender, owner));

    int op = in_msg_body~load_uint(32);    

    if (~init & (op == OP::INIT)) { ;; 
      cell child_code = in_msg_body~load_ref();
      cell content = in_msg_body~load_ref();
      save_data(-1, owner, proxy_id, next_child_id, child_code, parent_addr, content);
      return ();
    }

    throw_unless(ERROR::UNINITIALIZED, init);

    if (op == OP::NEW_CHILD) { ;; create new child
      deploy_child(owner, next_child_id, child_code);
      save_data(owner, proxy_id, next_child_id + 1, child_code, parent_addr, content);
      return ();
    }

    if (op == OP::CHANGE_OWNER) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, proxy_id, next_child_id, child_code, parent_addr, content);
      return ();
    }

}

;; Get methods
slice get_owner_addr() method_id {
  var (owner_addr, _, _, _, _, _) = load_data();
  return owner_addr;
}

int get_proxy_id() method_id {
  var (_, proxy_id, _, _, _, _) = load_data();
  return proxy_id;
}

int get_next_child_id() method_id {
  var (_, _, next_child_id, _, _, _) = load_data();
  return next_child_id;
}

slice get_child_code() method_id {
  var (_, _, _, child_code, _, _) = load_data();
  return child_code;
}

slice get_parent_addr() method_id {
  var (_, _, _, _, parent_addr, _) = load_data();
  return parent_addr;
}

cell get_content() method_id {
  var (_, _, _, _, _, content) = load_data();
  slice cs = content.begin_parse();
  return cs~load_ref();
}

slice get_child_addr(int child_id, slice owner) method_id {
  var (_, _, _, child_code, _, _) = load_data();
  cell state_init = calculate_child_state_init(owner, child_id, child_code);
  slice child_address =  calculate_child_address(0, state_init);
  return child_address;
}
