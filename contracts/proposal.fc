;; This is a simple proposal contract aimd to store votes as transactions 
;; Voting uses the commend field of an incoming message


(int, int, int, int, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();

    int dao_id = ds~load_uint(64);
    int proposal_id = ds~load_uint(64);
    int proposal_start_time = ds~load_uint(64);
    int proposal_end_time = ds~load_uint(64);
    int proposal_snapshot_time = ds~load_uint(64);
    int proposal_type = ds~load_uint(8);
    int voting_power_strategy = ds~load_uint(8);

	ds.end_parse();

    return (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    throw_unless(0x1000, now() > proposal_start_time);
    throw_unless(0x1001, now() < proposal_end_time);

    return ();
}

(int) get_dao_id() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return dao_id;
}

(int) get_proposal_id() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return proposal_id;
}

(int) get_proposal_start_time() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return proposal_start_time;
}

(int) get_proposal_end_time() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return proposal_end_time;
}

(int) get_proposal_snapshot_time() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return proposal_snapshot_time;
}

(int) get_proposal_type() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return proposal_type;
}

(int) get_voting_power_strategy() method_id {
    var (dao_id, proposal_id, proposal_start_time, proposal_end_time, proposal_snapshot_time, proposal_type, voting_power_strategy) = load_data();
    return voting_power_strategy;
}
