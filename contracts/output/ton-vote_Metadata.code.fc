#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

slice __tact_context_get_sender() inline { return __tact_context_sender; }

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

(slice, ((int))) __gen_read_Deploy(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

builder __gen_write_DeployOk(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_DeployOk((int) v) inline {
    return __gen_write_DeployOk(begin_cell(), v).end_cell();
}

builder __gen_write_Metadata(builder build_0, (slice, slice, slice, slice, slice, slice, slice, slice, slice, int) v) inline {
    var (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'avatar).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'about).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'website).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'terms).end_cell());
    var build_2 = begin_cell();
    build_2 = build_2.store_ref(begin_cell().store_slice(v'telegram).end_cell());
    build_2 = build_2.store_ref(begin_cell().store_slice(v'github).end_cell());
    build_2 = __tact_store_address(build_2, v'jetton);
    build_2 = __tact_store_address(build_2, v'nft);
    build_2 = build_2.store_int(v'hide, 1);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int))) __gen_read_Metadata(slice sc_0) inline {
    var v'avatar = sc_0~load_ref().begin_parse();
    var v'name = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'about = sc_1~load_ref().begin_parse();
    var v'website = sc_1~load_ref().begin_parse();
    var v'terms = sc_1~load_ref().begin_parse();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'telegram = sc_2~load_ref().begin_parse();
    var v'github = sc_2~load_ref().begin_parse();
    var v'jetton = sc_2~__tact_load_address();
    var v'nft = sc_2~__tact_load_address();
    var v'hide = sc_2~load_int(1);
    return (sc_0, (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide));
}

(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int))) __gen_read_$init$Metadata(slice sc_0) inline_ref {
    var v'avatar = sc_0~load_ref().begin_parse();
    var v'name = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'about = sc_1~load_ref().begin_parse();
    var v'website = sc_1~load_ref().begin_parse();
    var v'terms = sc_1~load_ref().begin_parse();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'telegram = sc_2~load_ref().begin_parse();
    var v'github = sc_2~load_ref().begin_parse();
    var v'jetton = sc_2~__tact_load_address();
    var v'nft = sc_2~__tact_load_address();
    var v'hide = sc_2~load_int(1);
    return (sc_0, (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide));
}

(slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $__gen_Metadata_init(slice $avatar, slice $name, slice $about, slice $website, slice $terms, slice $telegram, slice $github, slice $jetton, slice $nft, int $hide) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = (null(), null(), null(), null(), null(), null(), null(), null(), null(), null());
    $self'avatar = $avatar;
    $self'name = $name;
    $self'about = $about;
    $self'website = $website;
    $self'terms = $terms;
    $self'telegram = $telegram;
    $self'github = $github;
    $self'jetton = $jetton;
    $self'nft = $nft;
    $self'hide = $hide;
    return ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide);
}

(slice, slice, slice, slice, slice, slice, slice, slice, slice, int) __gen_load_Metadata() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_Metadata();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice avatar, slice name, slice about, slice website, slice terms, slice telegram, slice github, slice jetton, slice nft, int hide) = $sc~__gen_read_$init$Metadata();
        $sc.end_parse();
        return $__gen_Metadata_init(avatar, name, about, website, terms, telegram, github, jetton, nft, hide);
    }
}

() __gen_store_Metadata((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_Metadata(b, v);
    set_data(b.end_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

() $reply(cell $body) impure inline_ref {
    $send(__gen_constructor_SendParameters$bounce_to_value_mode_body(true, __tact_context_get_sender(), 0, (64 + 2), $body));
}

slice $__gen_Metadata_avatar((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'avatar;
}

_ $__gen_get_avatar() method_id(100315) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_avatar(self);
    return res;
}

slice $__gen_Metadata_name((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'name;
}

_ $__gen_get_name() method_id(71334) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_name(self);
    return res;
}

slice $__gen_Metadata_about((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'about;
}

_ $__gen_get_about() method_id(96722) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_about(self);
    return res;
}

slice $__gen_Metadata_website((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'website;
}

_ $__gen_get_website() method_id(129198) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_website(self);
    return res;
}

slice $__gen_Metadata_terms((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'terms;
}

_ $__gen_get_terms() method_id(128253) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_terms(self);
    return res;
}

slice $__gen_Metadata_telegram((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'telegram;
}

_ $__gen_get_telegram() method_id(73771) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_telegram(self);
    return res;
}

slice $__gen_Metadata_github((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'github;
}

_ $__gen_get_github() method_id(75775) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_github(self);
    return res;
}

slice $__gen_Metadata_jetton((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'jetton;
}

_ $__gen_get_jetton() method_id(129441) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_jetton(self);
    return res;
}

slice $__gen_Metadata_nft((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'nft;
}

_ $__gen_get_nft() method_id(73717) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_nft(self);
    return res;
}

int $__gen_Metadata_hide((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide)) = $self;
    return $self'hide;
}

_ $__gen_get_hide() method_id(74246) {
    var self = __gen_load_Metadata();
    var res = $__gen_Metadata_hide(self);
    return res;
}

((int)) __gen_constructor_DeployOk$queryId(int queryId) inline {
    return (queryId);
}

(((slice, slice, slice, slice, slice, slice, slice, slice, slice, int)), ()) $__gen_Metadata_receive_Deploy((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self, (int) $deploy) impure inline {
    var ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(__gen_constructor_DeployOk$queryId($deploy'queryId)));
    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide), ());
}

((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), int) __gen_router_Metadata((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_Metadata_receive_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_Metadata();
    
    ;; Handle operation
    int handled = self~__gen_router_Metadata(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_Metadata(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmQMaUomAtXm6pS3wQKuiEqsgj2FrFTdKpibaggW57LhPG";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
