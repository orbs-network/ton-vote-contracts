;;
;; Header files for ProposalDeployer
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Params$_store
builder $Params$_store(builder build_0, (int, int, int, slice, slice, slice, slice, slice) v) inline_ref;

;; $Params$_load
(slice, ((int, int, int, slice, slice, slice, slice, slice))) $Params$_load(slice sc_0) inline_ref;

;; $DeployAndInitProposal$_load
(slice, (((int, int, int, slice, slice, slice, slice, slice)))) $DeployAndInitProposal$_load(slice sc_0) inline;

;; $SendUpdateProposal$_load
(slice, ((slice, (int, int, int, slice, slice, slice, slice, slice), int))) $SendUpdateProposal$_load(slice sc_0) inline;

;; $ProposalInit$_store
builder $ProposalInit$_store(builder build_0, ((int, int, int, slice, slice, slice, slice, slice)) v) inline;

;; $ProposalInit$_store_cell
cell $ProposalInit$_store_cell(((int, int, int, slice, slice, slice, slice, slice)) v) inline;

;; $UpdateProposal$_store
builder $UpdateProposal$_store(builder build_0, ((int, int, int, slice, slice, slice, slice, slice), int) v) inline;

;; $UpdateProposal$_store_cell
cell $UpdateProposal$_store_cell(((int, int, int, slice, slice, slice, slice, slice), int) v) inline;

;; $ProposalDeployer$_store
builder $ProposalDeployer$_store(builder build_0, (slice, int) v) inline;

;; $ProposalDeployer$_load
(slice, ((slice, int))) $ProposalDeployer$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Proposal$init$_store
builder $Proposal$init$_store(builder build_0, (slice, int) v) inline;

;; $ProposalDeployer$init$_load
(slice, ((slice))) $ProposalDeployer$init$_load(slice sc_0) inline;

;; $ProposalDeployer$_contract_init
(slice, int) $ProposalDeployer$_contract_init(slice $dao) impure inline_ref;

;; $ProposalDeployer$_contract_load
(slice, int) $ProposalDeployer$_contract_load() impure inline_ref;

;; $ProposalDeployer$_contract_store
() $ProposalDeployer$_contract_store((slice, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Proposal$_init_child
(cell, cell) $Proposal$_init_child(cell sys', slice $proposalDeployer, int $id) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $ProposalDeployer$_fun_getProposalStateInit
((slice, int), (cell, cell)) $ProposalDeployer$_fun_getProposalStateInit((slice, int) $self, int $index) impure inline_ref;

;; $ProposalDeployer$_fun_dao
((slice, int), slice) $ProposalDeployer$_fun_dao((slice, int) $self) impure inline_ref;

;; $ProposalDeployer$_fun_nextProposalId
((slice, int), int) $ProposalDeployer$_fun_nextProposalId((slice, int) $self) impure inline_ref;

;; $ProposalDeployer$_fun_proposalAddr
((slice, int), slice) $ProposalDeployer$_fun_proposalAddr((slice, int) $self, int $index) impure inline_ref;

;; $ProposalDeployer$_fun_forward
((slice, int), ()) $ProposalDeployer$_fun_forward((slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $ProposalDeployer$_fun_notify
((slice, int), ()) $ProposalDeployer$_fun_notify((slice, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $ProposalInit$_constructor_body
(((int, int, int, slice, slice, slice, slice, slice))) $ProposalInit$_constructor_body((int, int, int, slice, slice, slice, slice, slice) body) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $UpdateProposal$_constructor_updateParams_hide
(((int, int, int, slice, slice, slice, slice, slice), int)) $UpdateProposal$_constructor_updateParams_hide((int, int, int, slice, slice, slice, slice, slice) updateParams, int hide) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
