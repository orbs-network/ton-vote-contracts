#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "ton-vote_Metadata.headers.fc";
#include "ton-vote_Metadata.stdlib.fc";
#include "ton-vote_Metadata.storage.fc";

;;
;; Contract Metadata functions
;;

(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $Metadata$_contract_init(slice $avatar, slice $name, slice $about, slice $website, slice $terms, slice $telegram, slice $github, slice $jetton, slice $nft, int $hide, slice $dns) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)) = (null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null());
    $self'avatar = $avatar;
    $self'name = $name;
    $self'about = $about;
    $self'website = $website;
    $self'terms = $terms;
    $self'telegram = $telegram;
    $self'github = $github;
    $self'jetton = $jetton;
    $self'nft = $nft;
    $self'hide = $hide;
    $self'dns = $dns;
    return ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns);
}

((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), (slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) $Metadata$_fun_state((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self) impure inline_ref {
    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)) = $self;
    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), $MetadataState$_constructor_avatar_name_about_website_terms_telegram_github_jetton_nft_hide_dns($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns));
}

;;
;; Receivers of a Contract Metadata
;;

(((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)), ()) $Metadata$_internal_binary_Deploy((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self, (int) $deploy) impure inline {
    var ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)~$Metadata$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), ());
}

;;
;; Get methods of a Contract Metadata
;;

_ %state() method_id(77589) {
    var self = $Metadata$_contract_load();
    var res = self~$Metadata$_fun_state();
    return $MetadataState$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmb7WnFz18ei9jymNwpGSbAoXDZnWQsPjYceddBr14Za8L";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Metadata
;;

((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), int) $Metadata$_contract_router_internal((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Metadata$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Metadata$_contract_load();
    
    ;; Handle operation
    int handled = self~$Metadata$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Metadata$_contract_store(self);
}
