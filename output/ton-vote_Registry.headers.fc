;;
;; Header files for Registry
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $CreateDao$_load
(slice, ((slice, slice, slice))) $CreateDao$_load(slice sc_0) inline;

;; $SetCreateDaoFee$_load
(slice, ((int))) $SetCreateDaoFee$_load(slice sc_0) inline;

;; $SendToDaoSetFwdMsgFee$_load
(slice, ((int, int))) $SendToDaoSetFwdMsgFee$_load(slice sc_0) inline;

;; $SetRegistryAdmin$_load
(slice, ((slice))) $SetRegistryAdmin$_load(slice sc_0) inline;

;; $SetFwdMsgFee$_store
builder $SetFwdMsgFee$_store(builder build_0, (int) v) inline;

;; $SetFwdMsgFee$_store_cell
cell $SetFwdMsgFee$_store_cell((int) v) inline;

;; $DaoInit$_store
builder $DaoInit$_store(builder build_0, (slice, slice, slice) v) inline;

;; $DaoInit$_store_cell
cell $DaoInit$_store_cell((slice, slice, slice) v) inline;

;; $Registry$_store
builder $Registry$_store(builder build_0, (int, int, slice, int) v) inline;

;; $Registry$_load
(slice, ((int, int, slice, int))) $Registry$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Dao$init$_store
builder $Dao$init$_store(builder build_0, (slice, int) v) inline;

;; $Registry$init$_load
(slice, ((int))) $Registry$init$_load(slice sc_0) inline;

;; $Registry$_contract_init
(int, int, slice, int) $Registry$_contract_init(int $registryId) impure inline_ref;

;; $Registry$_contract_load
(int, int, slice, int) $Registry$_contract_load() impure inline_ref;

;; $Registry$_contract_store
() $Registry$_contract_store((int, int, slice, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Dao$_init_child
(cell, cell) $Dao$_init_child(cell sys', slice $registry, int $daoIndex) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Registry$_fun_getDaoStateInit
((int, int, slice, int), (cell, cell)) $Registry$_fun_getDaoStateInit((int, int, slice, int) $self, int $daoIndex) impure inline_ref;

;; $Registry$_fun_nextDaoId
((int, int, slice, int), int) $Registry$_fun_nextDaoId((int, int, slice, int) $self) impure inline_ref;

;; $Registry$_fun_daoAddress
((int, int, slice, int), slice) $Registry$_fun_daoAddress((int, int, slice, int) $self, int $daoId) impure inline_ref;

;; $Registry$_fun_registryId
((int, int, slice, int), int) $Registry$_fun_registryId((int, int, slice, int) $self) impure inline_ref;

;; $Registry$_fun_admin
((int, int, slice, int), slice) $Registry$_fun_admin((int, int, slice, int) $self) impure inline_ref;

;; $Registry$_fun_createDaoFee
((int, int, slice, int), int) $Registry$_fun_createDaoFee((int, int, slice, int) $self) impure inline_ref;

;; $Registry$_fun_forward
((int, int, slice, int), ()) $Registry$_fun_forward((int, int, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Registry$_fun_notify
((int, int, slice, int), ()) $Registry$_fun_notify((int, int, slice, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $DaoInit$_constructor_owner_proposalOwner_metadata
((slice, slice, slice)) $DaoInit$_constructor_owner_proposalOwner_metadata(slice owner, slice proposalOwner, slice metadata) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $SetFwdMsgFee$_constructor_newFwdMsgFee
((int)) $SetFwdMsgFee$_constructor_newFwdMsgFee(int newFwdMsgFee) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
