;;
;; Header files for Metadata
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Metadata$_store
builder $Metadata$_store(builder build_0, (slice, slice, slice, slice, slice, slice, slice, slice, slice, int) v) inline;

;; $Metadata$_load
(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int))) $Metadata$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Metadata$init$_load
(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int))) $Metadata$init$_load(slice sc_0) inline_ref;

;; $Metadata$_contract_init
(slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $Metadata$_contract_init(slice $avatar, slice $name, slice $about, slice $website, slice $terms, slice $telegram, slice $github, slice $jetton, slice $nft, int $hide) impure inline_ref;

;; $Metadata$_contract_load
(slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $Metadata$_contract_load() impure inline_ref;

;; $Metadata$_contract_store
() $Metadata$_contract_store((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Metadata$_fun_avatar
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_avatar((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_name
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_name((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_about
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_about((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_website
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_website((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_terms
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_terms((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_telegram
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_telegram((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_github
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_github((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_jetton
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_jetton((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_nft
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), slice) $Metadata$_fun_nft((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $Metadata$_fun_hide
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), int) $Metadata$_fun_hide((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Metadata$_fun_forward
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), ()) $Metadata$_fun_forward((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Metadata$_fun_notify
((slice, slice, slice, slice, slice, slice, slice, slice, slice, int), ()) $Metadata$_fun_notify((slice, slice, slice, slice, slice, slice, slice, slice, slice, int) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
