;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: CreateDao
;; Header: 0x1aa05e3d
;; TLB: create_dao#1aa05e3d owner:address proposalOwner:address metadata:address = CreateDao
;;

(slice, ((slice, slice, slice))) $CreateDao$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 446717501);
    var v'owner = sc_0~__tact_load_address();
    var v'proposalOwner = sc_0~__tact_load_address();
    var v'metadata = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'proposalOwner, v'metadata));
}

;;
;; Type: SetCreateDaoFee
;; Header: 0xce971753
;; TLB: set_create_dao_fee#ce971753 newCreateDaoFee:uint64 = SetCreateDaoFee
;;

(slice, ((int))) $SetCreateDaoFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3466008403);
    var v'newCreateDaoFee = sc_0~load_uint(64);
    return (sc_0, (v'newCreateDaoFee));
}

;;
;; Type: SendToDaoSetFwdMsgFee
;; Header: 0x5815bd86
;; TLB: send_to_dao_set_fwd_msg_fee#5815bd86 daoId:uint32 newFwdMsgFee:uint64 = SendToDaoSetFwdMsgFee
;;

(slice, ((int, int))) $SendToDaoSetFwdMsgFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1477819782);
    var v'daoId = sc_0~load_uint(32);
    var v'newFwdMsgFee = sc_0~load_uint(64);
    return (sc_0, (v'daoId, v'newFwdMsgFee));
}

;;
;; Type: SetRegistryAdmin
;; Header: 0xc6d673ca
;; TLB: set_registry_admin#c6d673ca newAdmin:address = SetRegistryAdmin
;;

(slice, ((slice))) $SetRegistryAdmin$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3335943114);
    var v'newAdmin = sc_0~__tact_load_address();
    return (sc_0, (v'newAdmin));
}

;;
;; Type: SetFwdMsgFee
;; Header: 0xf4f3a602
;; TLB: set_fwd_msg_fee#f4f3a602 newFwdMsgFee:uint64 = SetFwdMsgFee
;;

builder $SetFwdMsgFee$_store(builder build_0, (int) v) inline {
    var (v'newFwdMsgFee) = v;
    build_0 = store_uint(build_0, 4109608450, 32);
    build_0 = build_0.store_uint(v'newFwdMsgFee, 64);
    return build_0;
}

cell $SetFwdMsgFee$_store_cell((int) v) inline {
    return $SetFwdMsgFee$_store(begin_cell(), v).end_cell();
}

((int)) $SetFwdMsgFee$_constructor_newFwdMsgFee(int newFwdMsgFee) inline {
    return (newFwdMsgFee);
}

;;
;; Type: DaoInit
;; Header: 0x1a83442d
;; TLB: dao_init#1a83442d owner:address proposalOwner:address metadata:address = DaoInit
;;

builder $DaoInit$_store(builder build_0, (slice, slice, slice) v) inline {
    var (v'owner, v'proposalOwner, v'metadata) = v;
    build_0 = store_uint(build_0, 444810285, 32);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'proposalOwner);
    build_0 = __tact_store_address(build_0, v'metadata);
    return build_0;
}

cell $DaoInit$_store_cell((slice, slice, slice) v) inline {
    return $DaoInit$_store(begin_cell(), v).end_cell();
}

((slice, slice, slice)) $DaoInit$_constructor_owner_proposalOwner_metadata(slice owner, slice proposalOwner, slice metadata) inline {
    return (owner, proposalOwner, metadata);
}

;;
;; Type: Dao
;;

builder $Dao$init$_store(builder build_0, (slice, int) v) inline {
    var (v'registry, v'daoIndex) = v;
    build_0 = __tact_store_address(build_0, v'registry);
    build_0 = build_0.store_int(v'daoIndex, 257);
    return build_0;
}

(cell, cell) $Dao$_init_child(cell sys', slice $registry, int $daoIndex) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Dao
    cell mine = __tact_dict_get_code(source, 25663);
    contracts = __tact_dict_set_code(contracts, 25663, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Dao$init$_store(b, ($registry, $daoIndex));
    return (mine, b.end_cell());
}

;;
;; Type: Registry
;;

builder $Registry$_store(builder build_0, (int, int, slice, int) v) inline {
    var (v'registryId, v'nextDaoId, v'admin, v'createDaoFee) = v;
    build_0 = build_0.store_uint(v'registryId, 32);
    build_0 = build_0.store_uint(v'nextDaoId, 32);
    build_0 = __tact_store_address(build_0, v'admin);
    build_0 = build_0.store_uint(v'createDaoFee, 64);
    return build_0;
}

(slice, ((int, int, slice, int))) $Registry$_load(slice sc_0) inline {
    var v'registryId = sc_0~load_uint(32);
    var v'nextDaoId = sc_0~load_uint(32);
    var v'admin = sc_0~__tact_load_address();
    var v'createDaoFee = sc_0~load_uint(64);
    return (sc_0, (v'registryId, v'nextDaoId, v'admin, v'createDaoFee));
}

(slice, ((int))) $Registry$init$_load(slice sc_0) inline {
    var v'registryId = sc_0~load_int(257);
    return (sc_0, (v'registryId));
}

(int, int, slice, int) $Registry$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Registry$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int registryId) = $sc~$Registry$init$_load();
        $sc.end_parse();
        return $Registry$_contract_init(registryId);
    }
}

() $Registry$_contract_store((int, int, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Registry$_store(b, v);
    set_data(b.end_cell());
}